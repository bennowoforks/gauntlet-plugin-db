name: Approve Plugin Bot

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  repository-projects: read
  contents: write # Allows committing changes

jobs:
  check-approval:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check User Permissions and Respond
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, comment } = context.payload;
            const { repo, owner } = context.repo;
            const user = comment.user.login;
            const commentBody = comment.body.trim();

            const { data: permissions } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner,
              repo,
              username: user
            });

            const hasPushAccess = ["write", "admin"].includes(permissions.permission);

            async function createIssueComment(message) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: message
              });
            }

            async function closeIssue() {
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

            if (!hasPushAccess) {
              await createIssueComment(`🦊 You do not have push access`);
              return;
            }

            if (commentBody === "!decline") {
              await createIssueComment(`🦊 Plugin declined by @${user}`);
              await closeIssue();
              return;
            }

            if (commentBody === "!approve") {
              await createIssueComment(`🦊 Plugin approved by @${user}`);
              await addToRegistry();
              await closeIssue();
              return;
            }

            async function addToRegistry() {
              const issueBody = issue.body || "";
              const regex = /### Plugin URL\s*\n\s*(\S+)/;
              const match = issueBody.match(regex);
              const pluginURL = match ? match[1] : null;

              if (pluginURL) {
                const fs = require('fs');
                const filePath = 'database/registry.txt';

                fs.appendFileSync(filePath, `${pluginURL}\n`);

                await createIssueComment(`🦊 Plugin added to registry: ${pluginURL}`);

                // Create an output variable to pass to the next step
                console.log(`::set-output name=plugin_url::${pluginURL}`);

              } else {
                await createIssueComment(`🦊 Plugin URL not found.`);
              }
            }
        id: approve_plugin

      - name: Install toml2json and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          curl -L -o /usr/local/bin/toml2json https://github.com/pappasam/toml2json/releases/download/v1.0.0/toml2json-linux-amd64
          sudo chmod +x /usr/local/bin/toml2json

      - name: Convert TOML to JSON
        run: |
          # Get plugin URL from curl
          PLUGIN_URL="${{ steps.approve_plugin.outputs.plugin_url }}"

          # Convert GitHub URL to raw URL
          RAW_URL=$(echo "$PLUGIN_URL" | sed 's/github.com/raw.githubusercontent.com/' | sed 's/$/\/main\/gauntlet.toml/')

          # Fetch and convert TOML
          curl -L "$RAW_URL" | toml2json > data.json

      - name: Add object to JSON list
        run: |
          FILE="database/plugins.json"

          NEW_OBJECT="$(cat data.json)"

          # Use jq to update the JSON file by adding the new object to the list
          jq --argjson new_object "$NEW_OBJECT" '.list += [$new_object]' "$FILE" > tmp.json && mv tmp.json "$FILE"

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add database/registry.txt database/plugins.json
          git commit -m "Add plugin: ${{ steps.approve_plugin.outputs.plugin_url }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Deployment Workflow
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-plugin.yml/dispatches \
               -d '{"ref": "main", "inputs": {"plugin_url": "${{ steps.approve_plugin.outputs.plugin_url }}"}}'
